Ext.data.JsonP.Siesta_Test_Simulate_Keyboard({"tagname":"class","name":"Siesta.Test.Simulate.Keyboard","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Siesta.Test.Simulate.Keyboard","members":{"cfg":[],"property":[],"method":[{"name":"keyPress","tagname":"method","owner":"Siesta.Test.Simulate.Keyboard","meta":{},"id":"method-keyPress"},{"name":"type","tagname":"method","owner":"Siesta.Test.Simulate.Keyboard","meta":{},"id":"method-type"}],"event":[],"css_var":[],"css_mixin":[]},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"linenr":9,"files":[{"filename":"Keyboard.js","href":"Keyboard.html#Siesta-Test-Simulate-Keyboard"}],"html_meta":{},"component":false,"superclasses":[],"subclasses":[],"mixedInto":["Siesta.Test.Browser"],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Mixed into</h4><div class='dependency'><a href='#!/api/Siesta.Test.Browser' rel='Siesta.Test.Browser' class='docClass'>Siesta.Test.Browser</a></div><h4>Files</h4><div class='dependency'><a href='source/Keyboard.html#Siesta-Test-Simulate-Keyboard' target='_blank'>Keyboard.js</a></div></pre><div class='doc-contents'><p>This is a mixin, providing the keyboard events simulation functionality.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-keyPress' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test.Simulate.Keyboard'>Siesta.Test.Simulate.Keyboard</span><br/><a href='source/Keyboard.html#Siesta-Test-Simulate-Keyboard-method-keyPress' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.Simulate.Keyboard-method-keyPress' class='name expandable'>keyPress</a>( <span class='pre'><a href=\"#!/api/Siesta.Test.ActionTarget\" rel=\"Siesta.Test.ActionTarget\" class=\"docClass\">Siesta.Test.ActionTarget</a> el, String key, Object options</span> )</div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/Siesta.Test.ActionTarget\" rel=\"Siesta.Test.ActionTarget\" class=\"docClass\">Siesta.Test.ActionTarget</a><div class='sub-desc'>\n</div></li><li><span class='pre'>key</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>options</span> : Object<div class='sub-desc'><p>any extra options used to configure the DOM event</p>\n\n<p>This method will simluate the key press, translated to the specified DOM element.\nThe following events will be fired, in order: <code>keydown</code>, <code>keypress</code>, <code>textInput</code>(webkit only currently), <code>keyup</code></p>\n</div></li></ul></div></div></div><div id='method-type' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test.Simulate.Keyboard'>Siesta.Test.Simulate.Keyboard</span><br/><a href='source/Keyboard.html#Siesta-Test-Simulate-Keyboard-method-type' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.Simulate.Keyboard-method-type' class='name expandable'>type</a>( <span class='pre'><a href=\"#!/api/Siesta.Test.ActionTarget\" rel=\"Siesta.Test.ActionTarget\" class=\"docClass\">Siesta.Test.ActionTarget</a> el, String text, [Function callback], [Object scope]</span> )</div><div class='description'><div class='short'>This method will simulate text typing, on a specified DOM element. ...</div><div class='long'><p>This method will simulate text typing, on a specified DOM element. Simulation of certain advanced keys is supported.\nYou can include the name of such key in the square brackets into the 2nd argument. See <a href=\"#!/api/Siesta.Test.Simulate.KeyCodes\" rel=\"Siesta.Test.Simulate.KeyCodes\" class=\"docClass\">Siesta.Test.Simulate.KeyCodes</a> for a list\nof key names.</p>\n\n<p>For example:</p>\n\n<pre><code>t.type(el, 'Foo bar[ENTER]', function () {\n    ...\n})\n</code></pre>\n\n<p>The following events will be fired, in order: <code>keydown</code>, <code>keypress</code>, <code>keyup</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>el</span> : <a href=\"#!/api/Siesta.Test.ActionTarget\" rel=\"Siesta.Test.ActionTarget\" class=\"docClass\">Siesta.Test.ActionTarget</a><div class='sub-desc'><p>The element to type into</p>\n</div></li><li><span class='pre'>text</span> : String<div class='sub-desc'><p>The text to type, including any names of special keys in square brackets.</p>\n</div></li><li><span class='pre'>callback</span> : Function (optional)<div class='sub-desc'><p>To run this method async, provide a callback method to be called after the type operation is completed.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>the scope for the callback</p>\n</div></li></ul></div></div></div></div></div></div></div>"});