Ext.data.JsonP.Siesta_Test({"tagname":"class","name":"Siesta.Test","extends":null,"mixins":["Siesta.Test.More","Siesta.Test.Date","Siesta.Test.Function"],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{},"private":null,"id":"class-Siesta.Test","members":{"cfg":[{"name":"isReadyTimeout","tagname":"cfg","owner":"Siesta.Test","meta":{},"id":"cfg-isReadyTimeout"},{"name":"waitForTimeout","tagname":"cfg","owner":"Siesta.Test.More","meta":{},"id":"cfg-waitForTimeout"}],"property":[],"method":[{"name":"beginAsync","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-beginAsync"},{"name":"chain","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-chain"},{"name":"compareObjects","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-compareObjects"},{"name":"diag","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-diag"},{"name":"done","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-done"},{"name":"endAsync","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-endAsync"},{"name":"endWait","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-endWait"},{"name":"expectGlobals","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-expectGlobals"},{"name":"fail","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-fail"},{"name":"is","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-is"},{"name":"isApprox","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isApprox"},{"name":"isCalled","tagname":"method","owner":"Siesta.Test.Function","meta":{},"id":"method-isCalled"},{"name":"isCalledNTimes","tagname":"method","owner":"Siesta.Test.Function","meta":{},"id":"method-isCalledNTimes"},{"name":"isDateEqual","tagname":"method","owner":"Siesta.Test.Date","meta":{},"id":"method-isDateEqual"},{"name":"isDeeply","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isDeeply"},{"name":"isDeeplyStrict","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isDeeplyStrict"},{"name":"isGreater","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isGreater"},{"name":"isGreaterOrEqual","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isGreaterOrEqual"},{"name":"isLess","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isLess"},{"name":"isLessOrEqual","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isLessOrEqual"},{"name":"isNot","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-isNot"},{"name":"isNotStrict","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-isNotStrict"},{"name":"isReady","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-isReady"},{"name":"isStrict","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-isStrict"},{"name":"isaOk","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-isaOk"},{"name":"isntCalled","tagname":"method","owner":"Siesta.Test.Function","meta":{},"id":"method-isntCalled"},{"name":"like","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-like"},{"name":"livesOk","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-livesOk"},{"name":"notOk","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-notOk"},{"name":"ok","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-ok"},{"name":"pass","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-pass"},{"name":"throwsOk","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-throwsOk"},{"name":"todo","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-todo"},{"name":"typeOf","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-typeOf"},{"name":"unlike","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-unlike"},{"name":"verifyGlobals","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-verifyGlobals"},{"name":"wait","tagname":"method","owner":"Siesta.Test","meta":{},"id":"method-wait"},{"name":"waitFor","tagname":"method","owner":"Siesta.Test.More","meta":{},"id":"method-waitFor"}],"event":[{"name":"beforetestfinalize","tagname":"event","owner":"Siesta.Test","meta":{},"id":"event-beforetestfinalize"},{"name":"testfailedwithexception","tagname":"event","owner":"Siesta.Test","meta":{},"id":"event-testfailedwithexception"},{"name":"testfinalize","tagname":"event","owner":"Siesta.Test","meta":{},"id":"event-testfinalize"},{"name":"teststart","tagname":"event","owner":"Siesta.Test","meta":{},"id":"event-teststart"},{"name":"testupdate","tagname":"event","owner":"Siesta.Test","meta":{},"id":"event-testupdate"}],"css_var":[],"css_mixin":[]},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"linenr":9,"files":[{"filename":"Test.js","href":"Test.html#Siesta-Test"}],"html_meta":{},"component":false,"superclasses":[],"subclasses":["Siesta.Test.Browser"],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Mixins</h4><div class='dependency'><a href='#!/api/Siesta.Test.Date' rel='Siesta.Test.Date' class='docClass'>Siesta.Test.Date</a></div><div class='dependency'><a href='#!/api/Siesta.Test.Function' rel='Siesta.Test.Function' class='docClass'>Siesta.Test.Function</a></div><div class='dependency'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='docClass'>Siesta.Test.More</a></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/Siesta.Test.Browser' rel='Siesta.Test.Browser' class='docClass'>Siesta.Test.Browser</a></div><h4>Files</h4><div class='dependency'><a href='source/Test.html#Siesta-Test' target='_blank'>Test.js</a></div></pre><div class='doc-contents'><p><code><a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a></code> is a base testing class in Siesta hierarchy. Its not supposed to be created manually, instead, the harness will create it for you.</p>\n\n<p>This file is a reference only, for a getting start guide and manual, please refer to <a href=\"#!/guide/siesta_getting_started\">Getting Started Guide</a>.</p>\n\n<p>Please note: Each test will be run in <strong>its own</strong>, completely <strong>isolated</strong> and <strong>clean</strong> global scope. <strong>There is no need to cleanup anything</strong>.</p>\n\n<h1>SYNOPSIS</h1>\n\n<pre><code>StartTest(function(t) {\n    t.diag(\"Sanity\")\n\n    t.ok($, 'jQuery is here')\n\n    t.ok(Your.Project, 'My project is here')\n    t.ok(Your.Project.Util, '.. indeed')\n\n    setTimeout(function () {\n\n        t.ok(true, \"True is ok\")\n\n    }, 500)\n})\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-isReadyTimeout' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-cfg-isReadyTimeout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-cfg-isReadyTimeout' class='name expandable'>isReadyTimeout</a><span> : Number</span></div><div class='description'><div class='short'>Timeout in milliseconds to wait for test start. ...</div><div class='long'><p>Timeout in milliseconds to wait for test start. Default value is 10000. See also <a href=\"#!/api/Siesta.Test-method-isReady\" rel=\"Siesta.Test-method-isReady\" class=\"docClass\">isReady</a></p>\n<p>Defaults to: <code>10000</code></p></div></div></div><div id='cfg-waitForTimeout' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-cfg-waitForTimeout' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-cfg-waitForTimeout' class='name expandable'>waitForTimeout</a><span> : Number</span></div><div class='description'><div class='short'>Default timeout for waitFor (in milliseconds). ...</div><div class='long'><p>Default timeout for <code>waitFor</code> (in milliseconds). Default value is 10000.</p>\n<p>Defaults to: <code>10000</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-beginAsync' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-beginAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-beginAsync' class='name expandable'>beginAsync</a>( <span class='pre'>Number time, Function errback</span> ) : Object</div><div class='description'><div class='short'>This method starts the \"asynchronous frame\". ...</div><div class='long'><p>This method starts the \"asynchronous frame\". The test will wait for all asynchronous frames to complete before it will finalize.\nThe frame should be finished with the <a href=\"#!/api/Siesta.Test-method-endAsync\" rel=\"Siesta.Test-method-endAsync\" class=\"docClass\">endAsync</a> call within the provided <code>time</code>, otherwise a failure will be reported.</p>\n\n<p>For example:</p>\n\n<pre><code> var async = t.beginAsync()\n\n Ext.require('Some.Class', function () {\n\n     t.ok(Some.Class, 'Some class was loaded')\n\n     t.endAsync(async)\n })\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>time</span> : Number<div class='sub-desc'><p>The maximum time (in ms) to wait until force the finalization of this async frame. Optional. Default time is 15000 ms.</p>\n</div></li><li><span class='pre'>errback</span> : Function<div class='sub-desc'><p>Optional. The function to call in case the call to <a href=\"#!/api/Siesta.Test-method-endAsync\" rel=\"Siesta.Test-method-endAsync\" class=\"docClass\">endAsync</a> was not detected withing <code>time</code>. If function\nwill return any \"truthy\" value, the failure will not be reported (you can report own failure with this errback).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The frame object, which can be used in <a href=\"#!/api/Siesta.Test-method-endAsync\" rel=\"Siesta.Test-method-endAsync\" class=\"docClass\">endAsync</a> call</p>\n</div></li></ul></div></div></div><div id='method-chain' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-chain' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-chain' class='name expandable'>chain</a>( <span class='pre'>Function/Object/Array step1, Function/Object step2, Function/Object stepN</span> )</div><div class='description'><div class='short'>This method accept either variable number of arguments (steps) or the array of them. ...</div><div class='long'><p>This method accept either variable number of arguments (steps) or the array of them. Each step should be either a function or configuration object for test actions.\nThese functions / actions will be executed in order.</p>\n\n<p>If step is a function, as the 1st argument, it will receive a callback to call when the step is completed. As the 2nd and further arguments, the step function will receive the\narguments passed to the previous callback.</p>\n\n<p>The last step will receive a no-op callback, which can be ignored or still called.</p>\n\n<p>If a step is presented with action configuration object, then the callback will be called by the action class automatically. Configuration object should contain the \"action\" property,\nspecifying the action class and some other config options (depending from the action class).</p>\n\n<p>Its better to see how it works on the example. For example, when using using only functions:</p>\n\n<pre><code>t.chain(\n    // function receives a callback as 1st argument\n    function (next) {\n        // we pass that callback to the \"click\" method\n        t.click(buttonEl, next)\n    },\n    function (next) {\n        t.type(fieldEl, 'Something', next)\n    },\n    function (next) {\n        t.is(fieldEl.value == 'Something', 'Correct value in the field')\n\n        // call the callback with some arguments\n        next('foo', 'bar')  \n    }, \n    // those arguments are now available as arguments of next step\n    function (next, value1, value2) {\n        t.is(value1, 'foo', 'The arguments for the callback are translated to the arguments of the step')\n        t.is(value2, 'bar', 'The arguments for the callback are translated to the arguments of the step')\n    }\n)\n</code></pre>\n\n<p>The same example, using action configuration objects for first 2 steps:</p>\n\n<pre><code>t.chain(\n    {\n        action      : 'click',\n        target      : buttonEl\n    },\n    {\n        action      : 'type',\n        target      : fieldEl,\n        text        : 'Something'\n    },\n    function (next) {\n        t.is(fieldEl.value == 'Something', 'Correct value in the field')\n\n        next('foo', 'bar')  \n    }, \n    ...\n)\n</code></pre>\n\n<p> For the list of available actions please refer to the classes in the <a href=\"#!/api/Siesta.Test.Action\" rel=\"Siesta.Test.Action\" class=\"docClass\">Siesta.Test.Action</a> namespace. Please note, that each step is expected to complete within the <a href=\"#!/api/Siesta.Harness-cfg-defaultTimeout\" rel=\"Siesta.Harness-cfg-defaultTimeout\" class=\"docClass\">Siesta.Harness.defaultTimeout</a> time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>step1</span> : Function/Object/Array<div class='sub-desc'><p>The function to execute or action configuration, or the array of such</p>\n</div></li><li><span class='pre'>step2</span> : Function/Object<div class='sub-desc'><p>The function to execute or action configuration</p>\n</div></li><li><span class='pre'>stepN</span> : Function/Object<div class='sub-desc'><p>The function to execute or action configuration</p>\n</div></li></ul></div></div></div><div id='method-compareObjects' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-compareObjects' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-compareObjects' class='name expandable'>compareObjects</a>( <span class='pre'>Object obj1, Object obj2, Boolean strict</span> ) : Boolean</div><div class='description'><div class='short'>This method performs a deep comparison of the passed JSON objects. ...</div><div class='long'><p>This method performs a deep comparison of the passed JSON objects. Objects must not contain cyclic references.\nYou can use this method in your own assertions.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj1</span> : Object<div class='sub-desc'><p>The 1st object to compare</p>\n</div></li><li><span class='pre'>obj2</span> : Object<div class='sub-desc'><p>The 2nd object to compare</p>\n</div></li><li><span class='pre'>strict</span> : Boolean<div class='sub-desc'><p>When passed the <code>true</code> value, the comparison of the primitive values will be performed with the\n<code>===</code> operator (so [ 1 ] and [ \"1\" ] object will be different).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p><code>true</code> if the passed objects are equal</p>\n</div></li></ul></div></div></div><div id='method-diag' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-diag' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-diag' class='name expandable'>diag</a>( <span class='pre'>String desc</span> )</div><div class='description'><div class='short'>This method output the diagnostic message. ...</div><div class='long'><p>This method output the diagnostic message.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The text of diagnostic message</p>\n</div></li></ul></div></div></div><div id='method-done' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-done' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-done' class='name expandable'>done</a>( <span class='pre'>Number delay</span> )</div><div class='description'><div class='short'>This method indicates that test has completed at the expected point and no more assertions are planned. ...</div><div class='long'><p>This method indicates that test has completed at the expected point and no more assertions are planned. Adding assertions after the call to <code>done</code>\nwill add a failing assertion \"Adding assertion after test completion\".</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>delay</span> : Number<div class='sub-desc'><p>Optional. When provided, the test will not complete right away, but will wait for <code>delay</code> milliseconds for additional assertions.</p>\n</div></li></ul></div></div></div><div id='method-endAsync' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-endAsync' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-endAsync' class='name expandable'>endAsync</a>( <span class='pre'>Object frame</span> )</div><div class='description'><div class='short'>This method finalize the \"asynchronous frame\" started with beginAsync. ...</div><div class='long'><p>This method finalize the \"asynchronous frame\" started with <a href=\"#!/api/Siesta.Test-method-beginAsync\" rel=\"Siesta.Test-method-beginAsync\" class=\"docClass\">beginAsync</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>frame</span> : Object<div class='sub-desc'><p>The frame to finalize (returned by <a href=\"#!/api/Siesta.Test-method-beginAsync\" rel=\"Siesta.Test-method-beginAsync\" class=\"docClass\">beginAsync</a> method</p>\n</div></li></ul></div></div></div><div id='method-endWait' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-endWait' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-endWait' class='name expandable'>endWait</a>( <span class='pre'>String title</span> )</div><div class='description'><div class='short'>This method finalize the \"asynchronous frame\" started with wait. ...</div><div class='long'><p>This method finalize the \"asynchronous frame\" started with <a href=\"#!/api/Siesta.Test-method-wait\" rel=\"Siesta.Test-method-wait\" class=\"docClass\">wait</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>title</span> : String<div class='sub-desc'><p>The id of frame to finalize, which was previously passed to <a href=\"#!/api/Siesta.Test-method-wait\" rel=\"Siesta.Test-method-wait\" class=\"docClass\">wait</a> method</p>\n</div></li></ul></div></div></div><div id='method-expectGlobals' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-expectGlobals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-expectGlobals' class='name expandable'>expectGlobals</a>( <span class='pre'>String/RegExp name1, String/RegExp name2, String/RegExp nameN</span> )</div><div class='description'><div class='short'>This method accepts a variable number of names of expected properties in the global scope. ...</div><div class='long'><p>This method accepts a variable number of names of expected properties in the global scope. When verifying the globals with <a href=\"#!/api/Siesta.Test.More-method-verifyGlobals\" rel=\"Siesta.Test.More-method-verifyGlobals\" class=\"docClass\">verifyGlobals</a>\nassertions, the expected gloabls will not be counted as failed assertions.</p>\n\n<p>This method has a synonym with singular name: <code>expectGlobal</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name1</span> : String/RegExp<div class='sub-desc'><p>The name of global property or the regular expression to match several properties</p>\n</div></li><li><span class='pre'>name2</span> : String/RegExp<div class='sub-desc'><p>The name of global property or the regular expression to match several properties</p>\n</div></li><li><span class='pre'>nameN</span> : String/RegExp<div class='sub-desc'><p>The name of global property or the regular expression to match several properties</p>\n</div></li></ul></div></div></div><div id='method-fail' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-fail' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-fail' class='name expandable'>fail</a>( <span class='pre'>String desc, String/Object annotation</span> )</div><div class='description'><div class='short'>This method add the failed assertion to this test. ...</div><div class='long'><p>This method add the failed assertion to this test.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li><li><span class='pre'>annotation</span> : String/Object<div class='sub-desc'><p>The additional description how exactly this assertion fails. Will be shown with monospace font.</p>\n\n<p>Can be either string or an object with the following properties. In the latter case a string will be constructed from the properties of the object.</p>\n\n<ul>\n<li><code>assertionName</code> - the name of assertion, will be shown in the 1st line, along with originating source line (in FF and Chrome only)</li>\n<li><code>got</code> - an arbitrary JavaScript object, when provided will be shown on the next line</li>\n<li><code>need</code> - an arbitrary JavaScript object, when provided will be shown on the next line</li>\n<li><code>gotDesc</code> - a prompt for \"got\", default value is \"Got\", but can be for example: \"We have\"</li>\n<li><code>needDesc</code> - a prompt for \"need\", default value is \"Need\", but can be for example: \"We need\"</li>\n<li><code>annotation</code> - A text to append on the last line, can contain some additional explanations</li>\n</ul>\n\n\n<p> The \"got\" and \"need\" values will be stringified to the \"not quite JSON\" notation. Notably the points of circular references will be\n marked with <code>[Circular]</code> marks and the values at 4th (and following) level of depth will be marked with triple points: <code>[ [ [ ... ] ] ]</code></p>\n</div></li></ul></div></div></div><div id='method-is' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-is' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-is' class='name expandable'>is</a>( <span class='pre'>Mixed got, Mixed expected, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the comparison of 1st and 2nd arguments with == operator returns true and fails otherwise. ...</div><div class='long'><p>This assertion passes when the comparison of 1st and 2nd arguments with <code>==</code> operator returns true and fails otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>got</span> : Mixed<div class='sub-desc'><p>The value \"we have\" - will be shown as \"Got:\" in case of failure</p>\n</div></li><li><span class='pre'>expected</span> : Mixed<div class='sub-desc'><p>The value \"we expect\" - will be shown as \"Need:\" in case of failure</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isApprox' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isApprox' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isApprox' class='name expandable'>isApprox</a>( <span class='pre'>Number value1, Number value2, Number threshHold, String desc</span> )</div><div class='description'><div class='short'>This assertion suppose to compare the numeric values. ...</div><div class='long'><p>This assertion suppose to compare the numeric values. It passes when the passed values are approximately the same (the difference\nis withing a threshold). A threshold can be provided explicitly (when assertion is called with 4 arguments),\nor it will be set to 5% from the 1st value (when calling assertion with 3 arguments).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value1</span> : Number<div class='sub-desc'><p>The 1st value to compare</p>\n</div></li><li><span class='pre'>value2</span> : Number<div class='sub-desc'><p>The 2nd value to compare</p>\n</div></li><li><span class='pre'>threshHold</span> : Number<div class='sub-desc'><p>The maximum allowed difference between values. This argument can be omited.</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isCalled' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.Function' rel='Siesta.Test.Function' class='defined-in docClass'>Siesta.Test.Function</a><br/><a href='source/Function.html#Siesta-Test-Function-method-isCalled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.Function-method-isCalled' class='name expandable'>isCalled</a>( <span class='pre'>Function/String fn, Object host, String desc</span> )</div><div class='description'><div class='short'>This assertion passes if the function is called at least one time during the test life span. ...</div><div class='long'><p>This assertion passes if the function is called at least one time during the test life span.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function/String<div class='sub-desc'><p>The function itself or the name of the function on the host object (2nd argument)</p>\n</div></li><li><span class='pre'>host</span> : Object<div class='sub-desc'><p>The \"owner\" of the method</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion.</p>\n</div></li></ul></div></div></div><div id='method-isCalledNTimes' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.Function' rel='Siesta.Test.Function' class='defined-in docClass'>Siesta.Test.Function</a><br/><a href='source/Function.html#Siesta-Test-Function-method-isCalledNTimes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.Function-method-isCalledNTimes' class='name expandable'>isCalledNTimes</a>( <span class='pre'>Function/String fn, Object host, Number n, String desc</span> )</div><div class='description'><div class='short'>This assertion passes if the function is called exactly (n) times during the test life span. ...</div><div class='long'><p>This assertion passes if the function is called exactly (n) times during the test life span.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function/String<div class='sub-desc'><p>The function itself or the name of the function on the host object (2nd argument)</p>\n</div></li><li><span class='pre'>host</span> : Object<div class='sub-desc'><p>The \"owner\" of the method</p>\n</div></li><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The expected number of calls</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion.</p>\n</div></li></ul></div></div></div><div id='method-isDateEqual' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.Date' rel='Siesta.Test.Date' class='defined-in docClass'>Siesta.Test.Date</a><br/><a href='source/Date.html#Siesta-Test-Date-method-isDateEqual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.Date-method-isDateEqual' class='name expandable'>isDateEqual</a>( <span class='pre'>Date got, Date expectedDate, String description</span> )</div><div class='description'><div class='short'>This assertion passes when the 2 provided dates are equal and fails otherwise. ...</div><div class='long'><p>This assertion passes when the 2 provided dates are equal and fails otherwise.</p>\n\n<p>It has a synonym: <code>isDateEq</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>got</span> : Date<div class='sub-desc'><p>The 1st date to compare</p>\n</div></li><li><span class='pre'>expectedDate</span> : Date<div class='sub-desc'><p>The 2nd date to compare</p>\n</div></li><li><span class='pre'>description</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isDeeply' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isDeeply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isDeeply' class='name expandable'>isDeeply</a>( <span class='pre'>Object obj1, Object obj2, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when in-depth comparison of 1st and 2nd arguments (which are assumed to be JSON objects) shows ...</div><div class='long'><p>This assertion passes when in-depth comparison of 1st and 2nd arguments (which are assumed to be JSON objects) shows that they are equal.\nComparison is performed with '==' operator, so <code>[ 1 ]</code> and `[ \"1\" ] objects will be equal. The objects should not contain cyclic references.</p>\n\n<p>This method has a synonym: <code>is_deeply</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj1</span> : Object<div class='sub-desc'><p>The 1st object to compare</p>\n</div></li><li><span class='pre'>obj2</span> : Object<div class='sub-desc'><p>The 2nd object to compare</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isDeeplyStrict' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isDeeplyStrict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isDeeplyStrict' class='name expandable'>isDeeplyStrict</a>( <span class='pre'>Object obj1, Object obj2, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when in-depth comparison of 1st and 2nd arguments (which are assumed to be JSON objects) shows ...</div><div class='long'><p>This assertion passes when in-depth comparison of 1st and 2nd arguments (which are assumed to be JSON objects) shows that they are equal.\nComparison is performed with '===' operator, so <code>[ 1 ]</code> and `[ \"1\" ] objects will be different. The objects should not contain cyclic references.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj1</span> : Object<div class='sub-desc'><p>The 1st object to compare</p>\n</div></li><li><span class='pre'>obj2</span> : Object<div class='sub-desc'><p>The 2nd object to compare</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isGreater' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isGreater' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isGreater' class='name expandable'>isGreater</a>( <span class='pre'>Number value1, Number value2, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the comparison of 1st with 2nd, using &gt; operator will return true and fails otherwise. ...</div><div class='long'><p>This assertion passes, when the comparison of 1st with 2nd, using <code>&gt;</code> operator will return <code>true</code> and fails otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value1</span> : Number<div class='sub-desc'><p>The 1st value to compare</p>\n</div></li><li><span class='pre'>value2</span> : Number<div class='sub-desc'><p>The 2nd value to compare</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isGreaterOrEqual' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isGreaterOrEqual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isGreaterOrEqual' class='name expandable'>isGreaterOrEqual</a>( <span class='pre'>Number value1, Number value2, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the comparison of 1st with 2nd, using &gt;= operator will return true and fails otherwise. ...</div><div class='long'><p>This assertion passes, when the comparison of 1st with 2nd, using <code>&gt;=</code> operator will return <code>true</code> and fails otherwise.</p>\n\n<p>It has a synonym - <code>isGE</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value1</span> : Number<div class='sub-desc'><p>The 1st value to compare</p>\n</div></li><li><span class='pre'>value2</span> : Number<div class='sub-desc'><p>The 2nd value to compare</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isLess' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isLess' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isLess' class='name expandable'>isLess</a>( <span class='pre'>Number value1, Number value2, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the comparison of 1st with 2nd, using &lt; operator will return true and fails otherwise. ...</div><div class='long'><p>This assertion passes, when the comparison of 1st with 2nd, using <code>&lt;</code> operator will return <code>true</code> and fails otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value1</span> : Number<div class='sub-desc'><p>The 1st value to compare</p>\n</div></li><li><span class='pre'>value2</span> : Number<div class='sub-desc'><p>The 2nd value to compare</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isLessOrEqual' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isLessOrEqual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isLessOrEqual' class='name expandable'>isLessOrEqual</a>( <span class='pre'>Number value1, Number value2, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the comparison of 1st with 2nd, using &lt;= operator will return true and fails otherwise. ...</div><div class='long'><p>This assertion passes, when the comparison of 1st with 2nd, using <code>&lt;=</code> operator will return <code>true</code> and fails otherwise.</p>\n\n<p>It has a synonym - <code>isLE</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value1</span> : Number<div class='sub-desc'><p>The 1st value to compare</p>\n</div></li><li><span class='pre'>value2</span> : Number<div class='sub-desc'><p>The 2nd value to compare</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isNot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-isNot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-isNot' class='name expandable'>isNot</a>( <span class='pre'>Mixed got, Mixed expected, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the comparison of 1st and 2nd arguments with != operator returns true and fails otherwise. ...</div><div class='long'><p>This assertion passes when the comparison of 1st and 2nd arguments with <code>!=</code> operator returns true and fails otherwise.\nIt has synonyms - <code>isnot</code> and <code>isnt</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>got</span> : Mixed<div class='sub-desc'><p>The value \"we have\" - will be shown as \"Got:\" in case of failure</p>\n</div></li><li><span class='pre'>expected</span> : Mixed<div class='sub-desc'><p>The value \"we expect\" - will be shown as \"Need:\" in case of failure</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isNotStrict' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-isNotStrict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-isNotStrict' class='name expandable'>isNotStrict</a>( <span class='pre'>Mixed got, Mixed expected, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the comparison of 1st and 2nd arguments with !== operator returns true and fails otherwise. ...</div><div class='long'><p>This assertion passes when the comparison of 1st and 2nd arguments with <code>!==</code> operator returns true and fails otherwise.\nIt has synonyms - <code>isntStrict</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>got</span> : Mixed<div class='sub-desc'><p>The value \"we have\" - will be shown as \"Got:\" in case of failure</p>\n</div></li><li><span class='pre'>expected</span> : Mixed<div class='sub-desc'><p>The value \"we expect\" - will be shown as \"Need:\" in case of failure</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isReady' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-isReady' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-isReady' class='name expandable'>isReady</a>( <span class='pre'></span> ) : Object</div><div class='description'><div class='short'>This method allows you to delay the start of the test, for example for performing some asynchronous setup code (like ...</div><div class='long'><p>This method allows you to delay the start of the test, for example for performing some asynchronous setup code (like login into application).</p>\n\n<p>It is supposed to be overriden in the subclass of <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a> and should return object with properties \"ready\" and \"reason\"\n(\"reason\" is only meaningful for \"ready : false\"). Test instance will poll this method and will only launch\nthe test, when this method will return \"ready : true\". If waiting for this will take longer than <a href=\"#!/api/Siesta.Test-cfg-isReadyTimeout\" rel=\"Siesta.Test-cfg-isReadyTimeout\" class=\"docClass\">isReadyTimeout</a> then, test\nwill be launched anyway, but a failing assertion will be added to it.</p>\n\n<p><strong>Important</strong> This method should always check the value returned by <code>this.SUPER</code> call.</p>\n\n<p>Typical example of using this method will be:</p>\n\n<pre><code>Class('My.Test.Class', {\n\n    isa         : <a href=\"#!/api/Siesta.Test.Browser\" rel=\"Siesta.Test.Browser\" class=\"docClass\">Siesta.Test.Browser</a>,\n\n    has         : {\n        isCustomSetupDone           : false\n    },\n\n    override : {\n\n        isReady : function () {\n            var result = this.SUPERARG(arguments);\n\n            if (!result.ready) return result;\n\n            if (!this.isCustomSetupDone) return {\n                ready       : false,\n                reason      : \"Waiting for `isCustomSetupDone` took too long - something wrong?\"\n            }\n\n            return {\n                ready       : true\n            }\n        },\n\n\n        start : function () {\n            var me      = this;\n\n            Ext.Ajax.request({\n                url     : 'do_login.php',\n\n                params  : { ... },\n\n                success : function () {\n                    me.isCustomSetupDone    = true\n                }\n            })\n\n            this.SUPERARG(arguments)\n        }\n    },\n\n    ....\n})\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Object with properties <code>{ ready : true/false, reason : 'description' }</code></p>\n</div></li></ul></div></div></div><div id='method-isStrict' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-isStrict' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-isStrict' class='name expandable'>isStrict</a>( <span class='pre'>Mixed got, Mixed expected, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the comparison of 1st and 2nd arguments with === operator returns true and fails otherwise. ...</div><div class='long'><p>This assertion passes when the comparison of 1st and 2nd arguments with <code>===</code> operator returns true and fails otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>got</span> : Mixed<div class='sub-desc'><p>The value \"we have\" - will be shown as \"Got:\" in case of failure</p>\n</div></li><li><span class='pre'>expected</span> : Mixed<div class='sub-desc'><p>The value \"we expect\" - will be shown as \"Need:\" in case of failure</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isaOk' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-isaOk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-isaOk' class='name expandable'>isaOk</a>( <span class='pre'>Mixed value, Class/String className, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the supplied value is the instance of the className. ...</div><div class='long'><p>This assertion passes, when the supplied <code>value</code> is the instance of the <code>className</code>. The check is performed with\n<code>instanceof</code> operator. The <code>className</code> parameter can be supplied as class constructor or as string, representing the class\nname. In the latter case the <code>class</code> will eval'ed to receive the class constructor.</p>\n\n<p>This method has a synonym: isa_ok</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>The value to check for 'isa' relationship</p>\n</div></li><li><span class='pre'>className</span> : Class/String<div class='sub-desc'><p>The class to check for 'isa' relationship with <code>value</code></p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-isntCalled' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.Function' rel='Siesta.Test.Function' class='defined-in docClass'>Siesta.Test.Function</a><br/><a href='source/Function.html#Siesta-Test-Function-method-isntCalled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.Function-method-isntCalled' class='name expandable'>isntCalled</a>( <span class='pre'>Function/String fn, Object host, Number n, String desc</span> )</div><div class='description'><div class='short'>This assertion passes if the function is not called during the test life span. ...</div><div class='long'><p>This assertion passes if the function is not called during the test life span.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function/String<div class='sub-desc'><p>The function itself or the name of the function on the host object (2nd argument)</p>\n</div></li><li><span class='pre'>host</span> : Object<div class='sub-desc'><p>The \"owner\" of the method</p>\n</div></li><li><span class='pre'>n</span> : Number<div class='sub-desc'><p>The expected number of calls</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion.</p>\n</div></li></ul></div></div></div><div id='method-like' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-like' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-like' class='name expandable'>like</a>( <span class='pre'>String string, String/RegExp regex, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the passed string matches to a regular expression regex. ...</div><div class='long'><p>This assertion passes when the passed <code>string</code> matches to a regular expression <code>regex</code>. When <code>regex</code> is a string,\nassertion will check that it is a substring of <code>string</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>string</span> : String<div class='sub-desc'><p>The string to check for \"likeness\"</p>\n</div></li><li><span class='pre'>regex</span> : String/RegExp<div class='sub-desc'><p>The regex against which to test the string, can be also a plain string</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-livesOk' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-livesOk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-livesOk' class='name expandable'>livesOk</a>( <span class='pre'>Function func, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the supplied func function doesn't throw an exception during execution. ...</div><div class='long'><p>This assertion passes, when the supplied <code>func</code> function doesn't throw an exception during execution.</p>\n\n<p>This method has two synonyms: <code>lives_ok</code> and <code>lives</code></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>func</span> : Function<div class='sub-desc'><p>The function which is not supposed to throw an exception</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-notOk' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-notOk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-notOk' class='name expandable'>notOk</a>( <span class='pre'>Mixed value, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the supplied value evalutes to false and fails otherwise. ...</div><div class='long'><p>This assertion passes when the supplied <code>value</code> evalutes to <code>false</code> and fails otherwise.</p>\n\n<p>It has a synonym - <code>notok</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>The value, indicating wheter assertions passes or fails</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-ok' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-ok' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-ok' class='name expandable'>ok</a>( <span class='pre'>Mixed value, String desc</span> )</div><div class='description'><div class='short'>This assertion passes when the supplied value evalutes to true and fails otherwise. ...</div><div class='long'><p>This assertion passes when the supplied <code>value</code> evalutes to <code>true</code> and fails otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>The value, indicating wheter assertions passes or fails</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-pass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-pass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-pass' class='name expandable'>pass</a>( <span class='pre'>String desc, String annotation</span> )</div><div class='description'><div class='short'>This method add the passed assertion to this test. ...</div><div class='long'><p>This method add the passed assertion to this test.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li><li><span class='pre'>annotation</span> : String<div class='sub-desc'><p>The additional description how exactly this assertion passes. Will be shown with monospace font.</p>\n</div></li></ul></div></div></div><div id='method-throwsOk' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-throwsOk' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-throwsOk' class='name expandable'>throwsOk</a>( <span class='pre'>Function func, String/RegExp expected, String desc</span> )</div><div class='description'><div class='short'>This assertion passes, when the func function throws the exception during executing, and the\nstringified exception pa...</div><div class='long'><p>This assertion passes, when the <code>func</code> function throws the exception during executing, and the\nstringified exception passes the 'like' assertion (with 'expected' parameter).</p>\n\n<p>It has synonyms - <code>throws_ok</code> and <code>throws</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>func</span> : Function<div class='sub-desc'><p>The function which supposed to throw an exception</p>\n</div></li><li><span class='pre'>expected</span> : String/RegExp<div class='sub-desc'><p>The regex against which to test the stringified exception, can be also a plain string</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-todo' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-todo' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-todo' class='name expandable'>todo</a>( <span class='pre'>String why, Function code</span> )</div><div class='description'><div class='short'>With this method you can mark a group of assertions as \"todo\", assuming they most probably will fail,\nbut its still w...</div><div class='long'><p>With this method you can mark a group of assertions as \"todo\", assuming they most probably will fail,\nbut its still worth to try run them.\nThe supplied <code>code</code> function will be run, it will receive a new test instance as the 1st argument,\nwhich should be used for assertions checks (and not the primary test instance, received from <code>StartTest</code>).</p>\n\n<p>Assertions, failed inside the <code>code</code> block will be still treated by harness as \"green\".\nAssertions, passed inside the <code>code</code> block will be treated by harness as bonus ones and highlighted.</p>\n\n<p>See also <a href=\"#!/api/Siesta.Test.ExtJS-method-knownBugIn\" rel=\"Siesta.Test.ExtJS-method-knownBugIn\" class=\"docClass\">Siesta.Test.ExtJS.knownBugIn</a> method.</p>\n\n<p>For example:</p>\n\n<pre><code>t.todo('Scheduled for 4.1.x release', function (todo) {\n\n    var treePanel    = new Ext.tree.Panel()\n\n    todo.is(treePanel.getView().store, treePanel.store, 'NodeStore and TreeStore have been merged and there's only 1 store now);\n})\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>why</span> : String<div class='sub-desc'><p>The reason/description for the todo</p>\n</div></li><li><span class='pre'>code</span> : Function<div class='sub-desc'><p>A function, wrapping the \"todo\" assertions. This function will receive a special test class instance\nwhich should be used for assertions checks</p>\n</div></li></ul></div></div></div><div id='method-typeOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-typeOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-typeOf' class='name expandable'>typeOf</a>( <span class='pre'>Mixed object</span> ) : String</div><div class='description'><div class='short'>This method returns a result of Object.prototype.toString applied to the passed argument. ...</div><div class='long'><p>This method returns a result of <code>Object.prototype.toString</code> applied to the passed argument. The <code>[object</code> and trailing <code>]</code> are trimmed.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Mixed<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The name of the \"type\" for this object.</p>\n</div></li></ul></div></div></div><div id='method-unlike' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-unlike' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-unlike' class='name expandable'>unlike</a>( <span class='pre'>String string, String/RegExp regex, String desc</span> )</div><div class='description'><div class='short'>This method is the opposite of 'like', it adds failed assertion, when the string matches the passed regex. ...</div><div class='long'><p>This method is the opposite of 'like', it adds failed assertion, when the string matches the passed regex.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>string</span> : String<div class='sub-desc'><p>The string to check for \"unlikeness\"</p>\n</div></li><li><span class='pre'>regex</span> : String/RegExp<div class='sub-desc'><p>The regex against which to test the string, can be also a plain string</p>\n</div></li><li><span class='pre'>desc</span> : String<div class='sub-desc'><p>The description of the assertion</p>\n</div></li></ul></div></div></div><div id='method-verifyGlobals' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-verifyGlobals' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-verifyGlobals' class='name expandable'>verifyGlobals</a>( <span class='pre'>String/RegExp name1, String/RegExp name2, String/RegExp nameN</span> )</div><div class='description'><div class='short'>This method accepts a variable number of names of expected properties in the global scope and then performs a globals...</div><div class='long'><p>This method accepts a variable number of names of expected properties in the global scope and then performs a globals check.</p>\n\n<p>It will scan all globals properties in the scope of test and compare them with the list of expected globals. Expected globals can be provided with:\n<a href=\"#!/api/Siesta.Test.More-method-expectGlobals\" rel=\"Siesta.Test.More-method-expectGlobals\" class=\"docClass\">expectGlobals</a> method or <a href=\"#!/api/Siesta.Harness-cfg-expectedGlobals\" rel=\"Siesta.Harness-cfg-expectedGlobals\" class=\"docClass\">expectedGlobals</a> configuration option of harness.</p>\n\n<p>You can enable this assertion to automatically happen at the end of each test, using <a href=\"#!/api/Siesta.Harness-cfg-autoCheckGlobals\" rel=\"Siesta.Harness-cfg-autoCheckGlobals\" class=\"docClass\">autoCheckGlobals</a> option of the harness.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name1</span> : String/RegExp<div class='sub-desc'><p>The name of global property or the regular expression to match several properties</p>\n</div></li><li><span class='pre'>name2</span> : String/RegExp<div class='sub-desc'><p>The name of global property or the regular expression to match several properties</p>\n</div></li><li><span class='pre'>nameN</span> : String/RegExp<div class='sub-desc'><p>The name of global property or the regular expression to match several properties</p>\n</div></li></ul></div></div></div><div id='method-wait' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-method-wait' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-method-wait' class='name expandable'>wait</a>( <span class='pre'>String title, String howLong</span> )</div><div class='description'><div class='short'>This method starts the \"asynchronous frame\". ...</div><div class='long'><p>This method starts the \"asynchronous frame\". The test will wait for all asynchronous frames to complete before it will finalize.\nThe frame can be finished with the <a href=\"#!/api/Siesta.Test-method-endWait\" rel=\"Siesta.Test-method-endWait\" class=\"docClass\">endWait</a> call. Unlike the <a href=\"#!/api/Siesta.Test-method-beginAsync\" rel=\"Siesta.Test-method-beginAsync\" class=\"docClass\">beginAsync</a>, this method requires you to provide\nthe unique id for the asynchronous frame.</p>\n\n<p>For example:</p>\n\n<pre><code> t.wait(\"require\")\n\n Ext.require('Some.Class', function () {\n\n     t.ok(Some.Class, 'Some class was loaded')\n\n     t.endWait(\"require\")\n })\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>title</span> : String<div class='sub-desc'><p>The unique id for the asynchronous frame.</p>\n</div></li><li><span class='pre'>howLong</span> : String<div class='sub-desc'><p>The maximum time (in ms) to wait until force the finalization of this async frame. Optional. Default time is 15000 ms.</p>\n</div></li></ul></div></div></div><div id='method-waitFor' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Siesta.Test.More' rel='Siesta.Test.More' class='defined-in docClass'>Siesta.Test.More</a><br/><a href='source/More.html#Siesta-Test-More-method-waitFor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test.More-method-waitFor' class='name expandable'>waitFor</a>( <span class='pre'>Object/Function/Number method, Function callback, Object scope, Int timeout, Int interval</span> )</div><div class='description'><div class='short'>Waits for passed checker method to return true (or any non-false value, like for example DOM element or array), and c...</div><div class='long'><p>Waits for passed checker method to return true (or any non-false value, like for example DOM element or array), and calls the callback when this happens.\nAs an additional feature, the callback will receive the result from the checker method as the 1st argument.</p>\n\n<p>You can also call this method with a single Object having the following properties: method, callback, scope, timeout.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>method</span> : Object/Function/Number<div class='sub-desc'><p>Either a function which should return true when a certain condition has been fulfilled, or a number of ms to wait before calling the callback.</p>\n</div></li><li><span class='pre'>callback</span> : Function<div class='sub-desc'><p>A function to call when the condition has been met. Will receive a result from checker function.</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>The scope for the callback</p>\n</div></li><li><span class='pre'>timeout</span> : Int<div class='sub-desc'><p>The maximum amount of time (in milliseconds) to wait for the condition to be fulfilled. Defaults to the <a href=\"#!/api/Siesta.Test.ExtJS-cfg-waitForTimeout\" rel=\"Siesta.Test.ExtJS-cfg-waitForTimeout\" class=\"docClass\">Siesta.Test.ExtJS.waitForTimeout</a> value.</p>\n</div></li><li><span class='pre'>interval</span> : Int<div class='sub-desc'><p>The polling interval (in milliseconds)</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-beforetestfinalize' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-event-beforetestfinalize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-event-beforetestfinalize' class='name expandable'>beforetestfinalize</a>( <span class='pre'>JooseX.Observable.Event event, <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a> test</span> )</div><div class='description'><div class='short'>This event is fired before the individual test case ends (no any corresponded harness actions will be run yet). ...</div><div class='long'><p>This event is fired before the individual test case ends (no any corresponded harness actions will be run yet).</p>\n\n<p>This event bubbles up to the <a href=\"#!/api/Siesta.Harness\" rel=\"Siesta.Harness\" class=\"docClass\">harness</a>, you can observe it on harness as well.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : JooseX.Observable.Event<div class='sub-desc'><p>The event instance</p>\n</div></li><li><span class='pre'>test</span> : <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a><div class='sub-desc'><p>The test instance that is about to finalize</p>\n</div></li></ul></div></div></div><div id='event-testfailedwithexception' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-event-testfailedwithexception' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-event-testfailedwithexception' class='name expandable'>testfailedwithexception</a>( <span class='pre'>JooseX.Observable.Event event, <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a> test, Object exception</span> )</div><div class='description'><div class='short'>This event is fired when the individual test case has threw an exception. ...</div><div class='long'><p>This event is fired when the individual test case has threw an exception.</p>\n\n<p>This event bubbles up to the <a href=\"#!/api/Siesta.Harness\" rel=\"Siesta.Harness\" class=\"docClass\">harness</a>, you can observe it on harness as well.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : JooseX.Observable.Event<div class='sub-desc'><p>The event instance</p>\n</div></li><li><span class='pre'>test</span> : <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a><div class='sub-desc'><p>The test instance that just has threw an exception</p>\n</div></li><li><span class='pre'>exception</span> : Object<div class='sub-desc'><p>The exception thrown</p>\n</div></li></ul></div></div></div><div id='event-testfinalize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-event-testfinalize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-event-testfinalize' class='name expandable'>testfinalize</a>( <span class='pre'>JooseX.Observable.Event event, <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a> test</span> )</div><div class='description'><div class='short'>This event is fired when the individual test case ends (either because it has completed correctly and threw an except...</div><div class='long'><p>This event is fired when the individual test case ends (either because it has completed correctly and threw an exception).</p>\n\n<p>This event bubbles up to the <a href=\"#!/api/Siesta.Harness\" rel=\"Siesta.Harness\" class=\"docClass\">harness</a>, you can observe it on harness as well.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : JooseX.Observable.Event<div class='sub-desc'><p>The event instance</p>\n</div></li><li><span class='pre'>test</span> : <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a><div class='sub-desc'><p>The test instance that just has completed</p>\n</div></li></ul></div></div></div><div id='event-teststart' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-event-teststart' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-event-teststart' class='name expandable'>teststart</a>( <span class='pre'>JooseX.Observable.Event event, <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a> test</span> )</div><div class='description'><div class='short'>This event is fired when the individual test case starts. ...</div><div class='long'><p>This event is fired when the individual test case starts. When <em>started</em>, test may still be waiting for the <a href=\"#!/api/Siesta.Test-method-isReady\" rel=\"Siesta.Test-method-isReady\" class=\"docClass\">isReady</a> conditions\nto be fullfilled. Once all conditions will be fullfilled, test will be <em>launched</em>.</p>\n\n<p>This event bubbles up to the <a href=\"#!/api/Siesta.Harness\" rel=\"Siesta.Harness\" class=\"docClass\">harness</a>, you can observe it on harness as well.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : JooseX.Observable.Event<div class='sub-desc'><p>The event instance</p>\n</div></li><li><span class='pre'>test</span> : <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a><div class='sub-desc'><p>The test instance that just has started</p>\n</div></li></ul></div></div></div><div id='event-testupdate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Siesta.Test'>Siesta.Test</span><br/><a href='source/Test.html#Siesta-Test-event-testupdate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Siesta.Test-event-testupdate' class='name expandable'>testupdate</a>( <span class='pre'>JooseX.Observable.Event event, <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a> test, Siesta.Result result</span> )</div><div class='description'><div class='short'>This event is fired when the individual test case receives new result (assertion or diagnostic message). ...</div><div class='long'><p>This event is fired when the individual test case receives new result (assertion or diagnostic message).</p>\n\n<p>This event bubbles up to the <a href=\"#!/api/Siesta.Harness\" rel=\"Siesta.Harness\" class=\"docClass\">harness</a>, you can observe it on harness as well.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : JooseX.Observable.Event<div class='sub-desc'><p>The event instance</p>\n</div></li><li><span class='pre'>test</span> : <a href=\"#!/api/Siesta.Test\" rel=\"Siesta.Test\" class=\"docClass\">Siesta.Test</a><div class='sub-desc'><p>The test instance that just has started</p>\n</div></li><li><span class='pre'>result</span> : Siesta.Result<div class='sub-desc'><p>The new result. Instance of Siesta.Result.Assertion or Siesta.Result.Diagnostic classes</p>\n</div></li></ul></div></div></div></div></div></div></div>"});